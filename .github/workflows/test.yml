name: Test

on:
  push:
    branches-ignore: [ main ]
  pull_request:
    branches: [ main ]
env:
  GITHUB_TOKEN: ${{ github.token }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  LINT_VERSION: "1.25.1"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go
      uses: actions/setup-go@v1.1.3
      with:
        go-version: 1.16
      id: go

    - name: Setup nodeJs
      uses: actions/setup-node@v1.4.4
      with:
        node-version: '14'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: next version
      run: |
            npm install @semantic-release/exec -D
            npm install @semantic-release/changelog -D
            npx semantic-release --dry-run

    - name: Get dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    - name: Generate AWS region file
      run: |
        aws ec2 describe-regions --region us-east-1 --query "Regions[].RegionName" --output text >> cmd/aws-regions.txt

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29
          args: -v
    
    - name: Execute Go tests
      run: go test -v ./...

    - name: Test CLI
      run: |
        FILE=./VERSION.env
        npm install @semantic-release/exec -D
        npm install @semantic-release/changelog -D
        npx semantic-release --dry-run
        if [ -f "$FILE" ]; then
            cat VERSION.env
            source VERSION.env
        fi
        go test -coverprofile=go.txt -v ./...
        go run main.go clean -r us-west-2
        go run main.go version
  
    - name: build & execute
      run: |
        echo "--------------------------------------------------"
        go build -ldflags="-X 'github.com/karl-cardenas-coding/go-lambda-cleanup/cmd.VersionString=$VERSION'" -o=glc -v
        ./glc clean -r us-west-2

    - uses: actions/upload-artifact@v1
      with:
        name: test-results
        path: go.txt